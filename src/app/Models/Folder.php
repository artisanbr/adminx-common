<?php

namespace ArtisanBR\Adminx\Common\App\Models;


use ArtisanBR\Adminx\Common\App\Enums\FileType;
use ArtisanBR\Adminx\Common\App\Models\Bases\EloquentModelBase;
use ArtisanBR\Adminx\Common\App\Models\Interfaces\OwneredModel;
use ArtisanBR\Adminx\Common\App\Models\Traits\HasOwners;
use ArtisanBR\Adminx\Common\App\Models\Traits\HasValidation;
use ArtisanBR\Adminx\Common\App\Models\Traits\Relations\BelongsToAccount;
use ArtisanBR\Adminx\Common\App\Models\Traits\Relations\BelongsToSite;
use ArtisanBR\Adminx\Common\App\Models\Traits\Relations\BelongsToUser;
use ArtisanBR\Adminx\Common\App\Models\Traits\Relations\HasMorphAssigns;
use ArtisanBR\Adminx\Common\App\Models\Traits\Relations\HasParent;
use ArtisanBR\Adminx\Common\App\Models\Traits\Relations\MorphToUploadable;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Query\Builder as DBBuilder;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Storage;

class Folder extends EloquentModelBase implements OwneredModel
{
    use HasParent, HasOwners, MorphToUploadable, BelongsToUser, BelongsToSite, BelongsToAccount, HasMorphAssigns, HasValidation;

    protected $fillable = [
        'site_id',
        'parent_id',
        'user_id',
        'account_id',
        'name',
        'type',
        'path',
        'uploadable_id',
        'uploadable_type',
    ];

    protected $casts = [
        'name' => 'string',
        'path' => 'string',
        'path' => 'string',
        'type' => FileType::class,
    ];

    //region VALIDATIONS
    public static function createRules(FormRequest $request = null): array
    {
        return [
            'name' => ['required'],
        ];
    }
    //endregion

    //region SCOPES
    public function scopeThemeMedia(Builder $query): Builder|DBBuilder
    {
        return $query->where('type', FileType::ThemeMedia);
    }

    public function scopeAsset(Builder $query): Builder|DBBuilder
    {
        return $query->where('type', FileType::ThemeAsset);
    }

    public function scopeRoot(Builder $query): Builder|DBBuilder
    {
        return $query->where('parent_id', null);
    }

    public function scopeParent(Builder $query, $parent_id): Builder|DBBuilder
    {
        return $query->where('parent_id', $parent_id);
    }
    //endregion

    //region ATTRIBUTES
    protected function getBacktraceAttribute()
    {
        $backtrace = collect();

        if ($this->parent) {
            $backtrace = $backtrace->merge($this->parent->backtrace->toArray());
        }

        $backtrace->add([
                            'id'        => $this->id,
                            'name'      => $this->name,
                            'parent_id' => $this->parent_id,
                        ]);

        return $backtrace;
    }

    protected function relativePath(): Attribute
    {
        return Attribute::make(get: fn() => ($this->parent_id ? "{$this->parent->relative_path}/" : '') . $this->name);
    }

    protected function uploadPath(): Attribute
    {
        return Attribute::make(get: fn() => ($this->uploadable ? "{$this->uploadable->upload_path}/" : '') . $this->relative_path);
    }
    //endregion

    //region OVERRIDES
    public function save(array $options = [])
    {
        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public function deleteWithFolder()
    {
        //Delete Children
        $this->children()->delete();

        //Delete Files
        $this->files()->delete();

        //Remover arquivo local
        Storage::drive('public')->deleteDirectory($this->path);

        return parent::delete(); // TODO: Change the autogenerated stub
    }
    //endregion

    //region RELATIONS
    public function files()
    {
        return $this->hasMany(File::class);
    }
    //endregion
}
